// üìÅ Views/Character/CharacterView.swift - Ï∫êÎ¶≠ÌÑ∞ ÏãúÏä§ÌÖú Î©îÏù∏ ÌôîÎ©¥
import SwiftUI

struct CharacterView: View {
    @ObservedObject var gameManager: GameManager
    @State private var selectedTab: CharacterTab = .stats
    @State private var showStatAllocation = false
    @State private var showSkillTree = false
    
    enum CharacterTab: String, CaseIterable {
        case stats = "Îä•Î†•Ïπò"
        case skills = "Í∏∞Ïà†"
        case achievements = "ÏóÖÏ†Å"
        case appearance = "Ïô∏Ìòï"
        
        var icon: String {
            switch self {
            case .stats: return "chart.bar.fill"
            case .skills: return "brain.head.profile"
            case .achievements: return "star.fill"
            case .appearance: return "person.crop.circle"
            }
        }
    }
    
    var body: some View {
        NavigationView {
            ZStack {
                // ÏàòÎ¨µÌôî Î∞∞Í≤Ω
                LinearGradient.paperBackground
                    .ignoresSafeArea()
                
                // Î∞∞Í≤Ω ÏÇ∞ Ïã§Î£®Ïó£
                VStack {
                    Spacer()
                    MountainSilhouette()
                        .frame(height: 120)
                        .opacity(0.1)
                }
                
                // ÏùÄÏùÄÌïú Î®π Ï†ê Ìå®ÌÑ¥
                InkDotPattern()
                    .opacity(0.08)
                
                ScrollView {
                    LazyVStack(spacing: 25) {
                        // ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº Ï∫êÎ¶≠ÌÑ∞ Ìó§Îçî
                        inkCharacterHeader
                        
                        // ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº Î†àÎ≤® ÏßÑÌñâÎ•†
                        inkLevelProgressCard
                        
                        // ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº ÌÉ≠ ÏÑ†ÌÉùÍ∏∞
                        inkTabSelector
                        
                        // ÌÉ≠Î≥Ñ ÏΩòÌÖêÏ∏†
                        inkTabContent
                    }
                    .padding(.horizontal, 20)
                    .padding(.top, 20)
                }
            }
            .navigationTitle("Ïó¨ÌñâÏûê Ï†ïÎ≥¥")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Menu {
                        Button("Ïä§ÌÉØ Ìï†Îãπ", systemImage: "plus.circle") {
                            showStatAllocation = true
                        }
                        .disabled(gameManager.player.statPoints == 0)
                        
                        Button("Ïä§ÌÇ¨ Ìä∏Î¶¨", systemImage: "brain") {
                            showSkillTree = true
                        }
                    } label: {
                        Image(systemName: "ellipsis.circle")
                            .foregroundColor(.brushText)
                    }
                }
            }
        }
        .sheet(isPresented: $showStatAllocation) {
            StatAllocationView(player: $gameManager.player)
        }
        .sheet(isPresented: $showSkillTree) {
            SkillTreeView(player: $gameManager.player)
        }
    }
    
    // MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº Ï∫êÎ¶≠ÌÑ∞ Ìó§Îçî
    private var inkCharacterHeader: some View {
        HStack(spacing: 20) {
            // Ï∫êÎ¶≠ÌÑ∞ ÏïÑÎ∞îÌÉÄ - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº
            ZStack {
                Circle()
                    .fill(Color.softWhite)
                    .frame(width: 90, height: 90)
                    .overlay(
                        Circle()
                            .stroke(Color.inkBlack.opacity(0.2), lineWidth: 2)
                    )
                    .shadow(color: Color.inkMist.opacity(0.3), radius: 6, x: 0, y: 3)
                
                Image(systemName: "figure.walk")
                    .font(.system(size: 40))
                    .foregroundColor(.brushText.opacity(0.7))
            }
            
            VStack(alignment: .leading, spacing: 12) {
                // Ï∫êÎ¶≠ÌÑ∞ Ïù¥Î¶ÑÍ≥º Î†àÎ≤®
                VStack(alignment: .leading, spacing: 4) {
                    Text(gameManager.player.name)
                        .font(.brushStroke)
                        .fontWeight(.semibold)
                        .foregroundColor(.brushText)
                    
                    Text("Î†àÎ≤® \(gameManager.player.level)")
                        .font(.inkText)
                        .foregroundColor(.fadeText)
                }
                
                // Ïó¨ÌñâÏûê Îì±Í∏â Ï†ïÎ≥¥
                HStack(spacing: 10) {
                    Image(systemName: "seal.fill")
                        .foregroundColor(.brushText.opacity(0.6))
                        .font(.caption)
                    Text("\(gameManager.player.currentLicense.displayName)")
                        .font(.inkText)
                        .foregroundColor(.brushText.opacity(0.8))
                }
                
                // ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Ìè¨Ïù∏Ìä∏Îì§
                if gameManager.player.statPoints > 0 || gameManager.player.skillPoints > 0 {
                    HStack(spacing: 12) {
                        if gameManager.player.statPoints > 0 {
                            HStack(spacing: 4) {
                                Circle()
                                    .fill(Color.brushText.opacity(0.6))
                                    .frame(width: 6, height: 6)
                                Text("Îä•Î†• \(gameManager.player.statPoints)")
                                    .font(.whisperText)
                                    .foregroundColor(.brushText.opacity(0.8))
                            }
                        }
                        
                        if gameManager.player.skillPoints > 0 {
                            HStack(spacing: 4) {
                                Circle()
                                    .fill(Color.brushText.opacity(0.6))
                                    .frame(width: 6, height: 6)
                                Text("Í∏∞Ïà† \(gameManager.player.skillPoints)")
                                    .font(.whisperText)
                                    .foregroundColor(.brushText.opacity(0.8))
                            }
                        }
                    }
                }
            }
            
            Spacer()
        }
        .inkCard()
    }
    
    // MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº Î†àÎ≤® ÏßÑÌñâÎ•† Ïπ¥Îìú
    private var inkLevelProgressCard: some View {
        VStack(alignment: .leading, spacing: 16) {
            // Î†àÎ≤® Ï†ïÎ≥¥
            HStack {
                Text("Î†àÎ≤® \(gameManager.player.level)")
                    .font(.brushStroke)
                    .foregroundColor(.brushText)
                
                Spacer()
                
                Text("\(gameManager.player.experience) / \(expRequiredForNextLevel) Í≤ΩÌóòÏπò")
                    .font(.whisperText)
                    .foregroundColor(.fadeText)
            }
            
            // Í≤ΩÌóòÏπò Î∞î - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº
            GeometryReader { geometry in
                ZStack(alignment: .leading) {
                    // Î∞∞Í≤Ω
                    RoundedRectangle(cornerRadius: 6)
                        .fill(Color.inkMist.opacity(0.3))
                        .frame(height: 8)
                    
                    // ÏßÑÌñâÎ•†
                    RoundedRectangle(cornerRadius: 6)
                        .fill(
                            LinearGradient(
                                colors: [Color.brushText.opacity(0.6), Color.brushText],
                                startPoint: .leading,
                                endPoint: .trailing
                            )
                        )
                        .frame(
                            width: geometry.size.width * min(Double(gameManager.player.experience) / Double(expRequiredForNextLevel), 1.0),
                            height: 8
                        )
                        .animation(.easeInOut(duration: 0.5), value: gameManager.player.experience)
                }
            }
            .frame(height: 8)
            
            // Ïû¨Ìôî Ï†ïÎ≥¥
            HStack(spacing: 24) {
                HStack(spacing: 8) {
                    Circle()
                        .fill(Color.brushText.opacity(0.6))
                        .frame(width: 6, height: 6)
                    Text("\(gameManager.player.money) Ï†Ñ")
                        .font(.whisperText)
                        .foregroundColor(.brushText.opacity(0.8))
                }
                
                HStack(spacing: 8) {
                    Circle()
                        .fill(Color.brushText.opacity(0.6))
                        .frame(width: 6, height: 6)
                    Text("Ïã†Î¢∞ÎèÑ \(gameManager.player.trustPoints)")
                        .font(.whisperText)
                        .foregroundColor(.brushText.opacity(0.8))
                }
            }
        }
        .inkCard()
    }
    
    // MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº ÌÉ≠ ÏÑ†ÌÉùÍ∏∞
    private var inkTabSelector: some View {
        HStack(spacing: 0) {
            ForEach(CharacterTab.allCases, id: \.self) { tab in
                Button(action: {
                    withAnimation(.easeInOut(duration: 0.2)) {
                        selectedTab = tab
                    }
                }) {
                    VStack(spacing: 8) {
                        Image(systemName: tab.icon)
                            .font(.system(size: 16, weight: selectedTab == tab ? .medium : .regular))
                            .foregroundColor(selectedTab == tab ? .brushText : .fadeText)
                        
                        Text(tab.rawValue)
                            .font(.whisperText)
                            .fontWeight(selectedTab == tab ? .medium : .regular)
                            .foregroundColor(selectedTab == tab ? .brushText : .fadeText)
                    }
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 12)
                    .background(
                        RoundedRectangle(cornerRadius: 8)
                            .fill(selectedTab == tab ? Color.inkMist.opacity(0.2) : Color.clear)
                            .overlay(
                                RoundedRectangle(cornerRadius: 8)
                                    .stroke(selectedTab == tab ? Color.inkBlack.opacity(0.1) : Color.clear, lineWidth: 1)
                            )
                    )
                }
                .animation(.easeInOut(duration: 0.2), value: selectedTab)
            }
        }
        .inkCard()
    }
    
    // MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº ÌÉ≠Î≥Ñ ÏΩòÌÖêÏ∏†
    @ViewBuilder
    private var inkTabContent: some View {
        switch selectedTab {
        case .stats:
            inkCharacterStatsView
        case .skills:
            inkCharacterSkillsView
        case .achievements:
            inkAchievementsView
        case .appearance:
            inkAppearanceView
        }
    }
    
    // MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº Îä•Î†•Ïπò Î∑∞
    private var inkCharacterStatsView: some View {
        VStack(spacing: 20) {
            // Í∏∞Î≥∏ Îä•Î†•Ïπò
            VStack(alignment: .leading, spacing: 16) {
                Text("Í∏∞Î≥∏ ÎçïÎ™©")
                    .font(.brushStroke)
                    .foregroundColor(.brushText)
                
                VStack(spacing: 12) {
                    InkStatRow(title: "Î¨¥Î†•", value: gameManager.player.strength, icon: "flame.fill")
                    InkStatRow(title: "ÏßÄÌòú", value: gameManager.player.intelligence, icon: "brain.head.profile")
                    InkStatRow(title: "Ïù∏Îçï", value: gameManager.player.charisma, icon: "heart.fill")
                    InkStatRow(title: "Ïö¥ÏÑ∏", value: gameManager.player.luck, icon: "star.fill")
                }
            }
            
            // Í±∞Îûò Í∏∞Ïòà
            VStack(alignment: .leading, spacing: 16) {
                Text("Í±∞Îûò Í∏∞Ïòà")
                    .font(.brushStroke)
                    .foregroundColor(.brushText)
                
                VStack(spacing: 12) {
                    InkStatRow(title: "ÏÉÅÏà†", value: gameManager.player.tradingSkill, icon: "cart.fill")
                    InkStatRow(title: "Ïñ∏Î≥Ä", value: gameManager.player.negotiationSkill, icon: "person.2.fill")
                    InkStatRow(title: "Í∞êÎ≥Ñ", value: gameManager.player.appraisalSkill, icon: "eye.fill")
                }
            }
        }
        .inkCard()
    }
    
    // MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº Ïä§ÌÇ¨ Î∑∞
    private var inkCharacterSkillsView: some View {
        VStack(spacing: 20) {
            Text("Î¨¥Ïòà ÏàòÎ†®")
                .font(.brushStroke)
                .foregroundColor(.brushText)
            
            Text("Í≥ß Îã§ÏñëÌïú Í∏∞ÏòàÎ•º ÏùµÌûê Ïàò ÏûàÏäµÎãàÎã§")
                .font(.inkText)
                .foregroundColor(.fadeText)
                .multilineTextAlignment(.center)
            
            Button("ÏàòÎ†®ÏÑú Î≥¥Í∏∞") {
                showSkillTree = true
            }
            .buttonStyle(InkButtonStyle())
        }
        .inkCard()
    }
    
    // MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº ÏóÖÏ†Å Î∑∞
    private var inkAchievementsView: some View {
        VStack(spacing: 20) {
            // ÏµúÍ∑º ÏóÖÏ†ÅÎì§
            VStack(alignment: .leading, spacing: 16) {
                HStack {
                    Text("ÏµúÍ∑º ÏÑ±Ï∑®")
                        .font(.brushStroke)
                        .foregroundColor(.brushText)
                    
                    Spacer()
                    
                    NavigationLink("Ï†ÑÏ≤¥ Î≥¥Í∏∞") {
                        AchievementView(achievementManager: AchievementManager())
                    }
                    .font(.whisperText)
                    .foregroundColor(.fadeText)
                }
                
                // ÏÉòÌîå ÏóÖÏ†ÅÎì§ - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº
                VStack(spacing: 12) {
                    InkAchievementMiniCard(
                        title: "Ï≤´ Í±∞Îûò",
                        description: "Ï≤´ Î≤àÏß∏ Í±∞Îûò ÏôÑÎ£å",
                        isCompleted: true,
                        progress: 1,
                        total: 1
                    )
                    
                    InkAchievementMiniCard(
                        title: "ÏàòÏßëÍ∞Ä",
                        description: "Îã§ÏñëÌïú Î¨ºÌíà ÏàòÏßë",
                        isCompleted: false,
                        progress: 7,
                        total: 10
                    )
                    
                    InkAchievementMiniCard(
                        title: "ÌÉêÌóòÍ∞Ä",
                        description: "Ïó¨Îü¨ ÏßÄÏó≠ ÌÉêÎ∞©",
                        isCompleted: true,
                        progress: 5,
                        total: 5
                    )
                }
            }
        }
        .inkCard()
    }
    
    // MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº Ïô∏Ìòï Î∑∞
    private var inkAppearanceView: some View {
        VStack(spacing: 20) {
            Text("ÏùòÏÉÅ ÏÑ†ÌÉù")
                .font(.brushStroke)
                .foregroundColor(.brushText)
            
            Text("Í≥ß Îã§ÏñëÌïú ÏùòÏÉÅÏùÑ ÏÑ†ÌÉùÌï† Ïàò ÏûàÏäµÎãàÎã§")
                .font(.inkText)
                .foregroundColor(.fadeText)
                .multilineTextAlignment(.center)
            
            // ÎØ∏Î¶¨Î≥¥Í∏∞ ÏòÅÏó≠
            ZStack {
                Circle()
                    .fill(Color.softWhite)
                    .frame(width: 120, height: 120)
                    .overlay(
                        Circle()
                            .stroke(Color.inkBlack.opacity(0.2), lineWidth: 2)
                    )
                
                Image(systemName: "figure.walk")
                    .font(.system(size: 60))
                    .foregroundColor(.brushText.opacity(0.7))
            }
            .shadow(color: Color.inkMist.opacity(0.3), radius: 6, x: 0, y: 3)
        }
        .inkCard()
    }
    
    // MARK: - Í≥ÑÏÇ∞Îêú ÏÜçÏÑ±Îì§
    private var expRequiredForNextLevel: Int {
        // TODO: Ïã§Ï†ú Í≤ΩÌóòÏπò Í≥µÏãù Íµ¨ÌòÑ
        return gameManager.player.level * 100
    }
}

// MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº Îä•Î†•Ïπò Ìñâ Ïª¥Ìè¨ÎÑåÌä∏
struct InkStatRow: View {
    let title: String
    let value: Int
    let icon: String
    
    var body: some View {
        HStack(spacing: 16) {
            // ÏïÑÏù¥ÏΩò
            ZStack {
                Circle()
                    .fill(Color.inkMist.opacity(0.3))
                    .frame(width: 36, height: 36)
                
                Image(systemName: icon)
                    .font(.system(size: 16))
                    .foregroundColor(.brushText.opacity(0.7))
            }
            
            // Ï†úÎ™©Í≥º Í∞í
            HStack {
                Text(title)
                    .font(.inkText)
                    .foregroundColor(.brushText)
                
                Spacer()
                
                Text("\(value)")
                    .font(.brushStroke)
                    .fontWeight(.medium)
                    .foregroundColor(.brushText)
            }
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(
            RoundedRectangle(cornerRadius: 8)
                .fill(Color.softWhite.opacity(0.5))
                .overlay(
                    RoundedRectangle(cornerRadius: 8)
                        .stroke(Color.inkBlack.opacity(0.1), lineWidth: 1)
                )
        )
    }
}

// MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº ÎØ∏Îãà ÏóÖÏ†Å Ïπ¥Îìú
struct InkAchievementMiniCard: View {
    let title: String
    let description: String
    let isCompleted: Bool
    let progress: Int
    let total: Int
    
    var body: some View {
        HStack(spacing: 16) {
            // ÏôÑÎ£å ÏÉÅÌÉú ÌëúÏãú
            ZStack {
                Circle()
                    .fill(isCompleted ? Color.brushText.opacity(0.2) : Color.inkMist.opacity(0.3))
                    .frame(width: 36, height: 36)
                
                Image(systemName: isCompleted ? "checkmark.seal.fill" : "hourglass")
                    .font(.system(size: 16))
                    .foregroundColor(isCompleted ? .brushText : .fadeText)
            }
            
            VStack(alignment: .leading, spacing: 6) {
                // Ï†úÎ™©
                Text(title)
                    .font(.inkText)
                    .fontWeight(.medium)
                    .foregroundColor(.brushText)
                
                // ÏÑ§Î™Ö
                Text(description)
                    .font(.whisperText)
                    .foregroundColor(.fadeText)
                
                // ÏßÑÌñâÎ•†
                if !isCompleted {
                    HStack(spacing: 8) {
                        Text("(\(progress)/\(total))")
                            .font(.whisperText)
                            .foregroundColor(.fadeText)
                        
                        // ÏßÑÌñâÎ•† Î∞î
                        GeometryReader { geometry in
                            ZStack(alignment: .leading) {
                                RoundedRectangle(cornerRadius: 2)
                                    .fill(Color.inkMist.opacity(0.3))
                                    .frame(height: 4)
                                
                                RoundedRectangle(cornerRadius: 2)
                                    .fill(Color.brushText.opacity(0.6))
                                    .frame(
                                        width: geometry.size.width * (Double(progress) / Double(total)),
                                        height: 4
                                    )
                            }
                        }
                        .frame(height: 4)
                    }
                }
            }
            
            Spacer()
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(
            RoundedRectangle(cornerRadius: 8)
                .fill(Color.softWhite.opacity(0.3))
                .overlay(
                    RoundedRectangle(cornerRadius: 8)
                        .stroke(Color.inkBlack.opacity(0.1), lineWidth: 1)
                )
        )
    }
}


// MARK: - Preview
#Preview {
    CharacterView(gameManager: GameManager())
}
