//
//  MainTabView.swift
//  way
//
//  Created by ÍπÄÏÉÅÌõà on 7/24/25.
//




// üìÅ Views/MainTabView.swift - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº ÌÉ≠Î∑∞ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
import SwiftUI

struct MainTabView: View {
    @EnvironmentObject var gameManager: GameManager
    @State private var selectedTab = 0
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                // ÏàòÎ¨µÌôî Î∞∞Í≤Ω
                LinearGradient.paperBackground
                    .ignoresSafeArea()
                
                VStack(spacing: 0) {
                    // Î©îÏù∏ ÏΩòÌÖêÏ∏† ÏòÅÏó≠
                    ZStack {
                        switch selectedTab {
                        case 0:
                            MapView()
                                .environmentObject(gameManager)
                        case 1:
                            PriceBoardView()
                                .environmentObject(gameManager)
                        case 2:
                            InventoryView()
                                .environmentObject(gameManager)
                        case 3:
                            CharacterView(gameManager: gameManager)
                        case 4:
                            ShopView()
                                .environmentObject(gameManager)
                        default:
                            MapView()
                                .environmentObject(gameManager)
                        }
                    }
                    .frame(maxWidth: .infinity, maxHeight: .infinity)
                    
                    // Ïª§Ïä§ÌÖÄ ÏàòÎ¨µÌôî ÌÉ≠Î∞î
                    InkTabBar(selectedTab: $selectedTab)
                }
            }
        }
    }
}

// MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº Ïª§Ïä§ÌÖÄ ÌÉ≠Î∞î
struct InkTabBar: View {
    @Binding var selectedTab: Int
    
    let tabs = [
        TabItem(icon: "map.fill", title: "ÏßÄÎèÑ", tag: 0),
        TabItem(icon: "chart.line.uptrend.xyaxis", title: "ÏãúÏÑ∏", tag: 1),
        TabItem(icon: "bag.fill", title: "Ïù∏Î≤§ÌÜ†Î¶¨", tag: 2),
        TabItem(icon: "person.crop.circle", title: "Ï∫êÎ¶≠ÌÑ∞", tag: 3),
        TabItem(icon: "house.fill", title: "Í±∞Ï≤ò", tag: 4)
    ]
    
    var body: some View {
        VStack(spacing: 0) {
            // ÏÉÅÎã® Íµ¨Î∂ÑÏÑ† - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº
            Rectangle()
                .fill(Color.inkMist)
                .frame(height: 1)
            
            // ÌÉ≠Î∞î Î©îÏù∏ ÏòÅÏó≠
            HStack(spacing: 0) {
                ForEach(tabs, id: \.tag) { tab in
                    InkTabButton(
                        tab: tab,
                        isSelected: selectedTab == tab.tag
                    ) {
                        withAnimation(.easeInOut(duration: 0.3)) {
                            selectedTab = tab.tag
                        }
                    }
                }
            }
            .padding(.horizontal, 8)
            .padding(.vertical, 12)
            .background(
                // ÌÉ≠Î∞î Î∞∞Í≤Ω - Î∞òÌà¨Î™Ö ÌïúÏßÄÏÉâ
                RoundedRectangle(cornerRadius: 0)
                    .fill(Color.softWhite.opacity(0.95))
                    .shadow(color: Color.inkMist.opacity(0.3), radius: 8, x: 0, y: -4)
            )
        }
    }
}

// MARK: - ÌÉ≠ ÏïÑÏù¥ÌÖú Îç∞Ïù¥ÌÑ∞ Î™®Îç∏
struct TabItem {
    let icon: String
    let title: String
    let tag: Int
}

// MARK: - ÏàòÎ¨µÌôî Ïä§ÌÉÄÏùº ÌÉ≠ Î≤ÑÌäº
struct InkTabButton: View {
    let tab: TabItem
    let isSelected: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 6) {
                // ÏïÑÏù¥ÏΩò
                Image(systemName: tab.icon)
                    .font(.system(size: 20, weight: isSelected ? .semibold : .regular))
                    .foregroundColor(isSelected ? .brushText : .fadeText)
                    .scaleEffect(isSelected ? 1.1 : 1.0)
                
                // ÌÉÄÏù¥ÌãÄ
                Text(tab.title)
                    .font(.whisperText)
                    .fontWeight(isSelected ? .medium : .regular)
                    .foregroundColor(isSelected ? .brushText : .fadeText)
            }
            .frame(maxWidth: .infinity)
            .padding(.vertical, 8)
            .background(
                // ÏÑ†ÌÉùÎêú ÌÉ≠ Î∞∞Í≤Ω
                RoundedRectangle(cornerRadius: 12)
                    .fill(isSelected ? Color.inkMist.opacity(0.2) : Color.clear)
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(isSelected ? Color.inkBlack.opacity(0.1) : Color.clear, lineWidth: 1)
                    )
            )
        }
        .animation(.easeInOut(duration: 0.2), value: isSelected)
    }
}
