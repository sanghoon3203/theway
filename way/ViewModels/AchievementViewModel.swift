// üìÅ ViewModels/AchievementViewModel.swift - ÏóÖÏ†Å Î∑∞Î™®Îç∏
import Foundation
import Combine
import UIKit

@MainActor
class AchievementViewModel: ObservableObject {
    @Published var achievements: [Achievement] = []
    @Published var isLoading = false
    @Published var errorMessage: String?
    @Published var showCompletionAlert = false
    @Published var newlyCompletedAchievement: Achievement?
    
    private let networkManager = NetworkManager.shared
    private var cancellables = Set<AnyCancellable>()
    
    init() {
        // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Î°ú Ï¥àÍ∏∞Ìôî (Í∞úÎ∞úÏö©)
        loadSampleData()
    }
    
    // MARK: - ÏóÖÏ†Å Î°úÎìú
    func loadAchievements() {
        isLoading = true
        errorMessage = nil
        
        // TODO: Ïã§Ï†ú API Ïó∞Îèô Ïãú NetworkManager ÏÇ¨Ïö©
        // ÌòÑÏû¨Îäî ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            self.isLoading = false
            // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞Îäî Ïù¥ÎØ∏ initÏóêÏÑú Î°úÎìúÎê®
        }
    }
    
    // MARK: - Î≥¥ÏÉÅ ÏàòÎ†π
    func claimReward(for achievementId: String) {
        guard let achievement = achievements.first(where: { $0.id == achievementId }),
              achievement.canClaim else {
            return
        }
        
        // TODO: Ïã§Ï†ú API Ïó∞Îèô
        // ÌòÑÏû¨Îäî Î°úÏª¨ÏóêÏÑúÎßå ÏóÖÎç∞Ïù¥Ìä∏
        if let index = achievements.firstIndex(where: { $0.id == achievementId }) {
            achievements[index].claimed = true
            showSuccessMessage("Î≥¥ÏÉÅÏùÑ Î∞õÏïòÏäµÎãàÎã§!")
        }
    }
    
    // MARK: - ÏóÖÏ†Å Ï≤¥ÌÅ¨ (Í≤åÏûÑ ÌîåÎ†àÏù¥ Ï§ë Ìò∏Ï∂ú)
    func checkForNewAchievements() {
        // TODO: Ïã§Ï†ú API Ïó∞Îèô
        // ÌòÑÏû¨Îäî ÏãúÎÆ¨Î†àÏù¥ÏÖò Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
        print("ÏóÖÏ†Å Ï≤¥ÌÅ¨ Ïã§ÌñâÎê® (ÌòÑÏû¨ ÏÉòÌîå Î™®Îìú)")
    }
    
    // MARK: - Private Methods
    
    private func handleNewAchievement(_ newAchievement: NewAchievementData) {
        // ÏÉà ÏóÖÏ†Å ÏôÑÎ£å ÏïåÎ¶º ÌëúÏãú
        if let achievement = achievements.first(where: { $0.id == newAchievement.id }) {
            newlyCompletedAchievement = achievement
            showCompletionAlert = true
        }
        
        // ÌñÖÌã± ÌîºÎìúÎ∞±
        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)
        impactFeedback.impactOccurred()
    }
    
    private func showSuccessMessage(_ message: String) {
        // TODO: Toast Î©îÏãúÏßÄ ÌëúÏãú ÏãúÏä§ÌÖú Íµ¨ÌòÑ
        print("ÏÑ±Í≥µ: \(message)")
    }
    
    // MARK: - Sample Data (Í∞úÎ∞úÏö©)
    private func loadSampleData() {
        var sampleData = Achievement.sampleAchievements
        
        // ÏÉòÌîå ÏßÑÌñâÎèÑ ÏÑ§Ï†ï
        sampleData[0].currentProgress = 1
        sampleData[0].isCompleted = true
        sampleData[0].completedAt = Date()
        sampleData[0].claimed = false
        
        sampleData[1].currentProgress = 45000
        sampleData[1].isCompleted = false
        
        sampleData[2].currentProgress = 7
        sampleData[2].isCompleted = false
        
        sampleData[3].currentProgress = 1
        sampleData[3].isCompleted = true
        sampleData[3].completedAt = Calendar.current.date(byAdding: .day, value: -2, to: Date())
        sampleData[3].claimed = true
        
        achievements = sampleData
    }
    
    // MARK: - Statistics
    var completedCount: Int {
        achievements.filter(\.isCompleted).count
    }
    
    var totalCount: Int {
        achievements.count
    }
    
    var completionRate: Double {
        guard totalCount > 0 else { return 0 }
        return Double(completedCount) / Double(totalCount)
    }
    
    func categoryProgress(for category: AchievementCategory) -> (completed: Int, total: Int) {
        let categoryAchievements = achievements.filter { $0.category == category }
        let completed = categoryAchievements.filter(\.isCompleted).count
        return (completed: completed, total: categoryAchievements.count)
    }
}

// MARK: - Response Models

struct NewAchievementResponse: Codable {
    let success: Bool
    let data: NewAchievementResponseData
}

struct NewAchievementResponseData: Codable {
    let newAchievements: [NewAchievementData]
}

struct NewAchievementData: Codable {
    let id: String
    let name: String
    let description: String
    let category: String
    let rewardType: String
    let rewardValue: String
}
